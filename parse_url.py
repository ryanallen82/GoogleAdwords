"""
A script that opens a Destination URL excel file generated by Google AdWords and does necessary parsing and clean up.

It Currently does the following:
    * Parses out the Destination URL query into it's components

    * Auto-generates columns/headers based on component names

    * Inputs the values of each component

    * Checks the spelling of each value for typos and changes any errors to an acceptable value

    * Puts an 'X' in the 'Fix' column if value was changed
"""

import pandas as pd 
from urlparse import urlparse, parse_qs
import Levenshtein as lev
import time

def init_dictionary(dictfile):
    """This function initializes the dataframe and a dictionary from the given filenames.
    It uses the pandas method read_excel to read the Destination URL file directly into a dataframe.
    The dictionary is created by reading the dictfile line by line, then creating a dictionary data
    structure with the words stripped of outside whitespaces and in lower case.

    :param dictfile: Path to the dictionary txt file containing acceptable words/terms
    :type dictfile: str.
    :returns:  dataframe , dictionary
    """

    dd = open(dictfile).readlines()
    dictionary = []

    for item in dd:
        dictionary.append(item.strip().lower())

    return dictionary


def create_headers(df):
    """This function automatically generates new columns in the dataframe with headers taken from the Destination URL
    query components. It also adds a column called 'Fixed' which is used to signal whether changes had to be made to parsed values
    due to types/incorrect spelling.

    :param df: Pandas DataFrame
    :type df: Pandas DataFrame
    :returns: Pandas DataFrame, list of headers from URL query parameters. 
     """
    urlparams = [] 
    for index, row in df.iterrows():
        parsed = urlparse(str(row['Destination URL'])).query
        parsed = parse_qs(parsed)
        for k, v in parsed.iteritems():
            if k.strip() not in urlparams:
                urlparams.append(k.strip())
            else:
                pass

    for item in urlparams:
        df[item] = None

    df['Fix'] = None

    return df, urlparams

def parse_url(df):
    """This function parses the Destination URL and places parameter values from the URL query into the correct DataFrame columns.
    
    :param df: Pandas DataFrame
    :type df: Pandas DataFrame
    :returns: Pandas DataFrame 
    """
    for index, row in df.iterrows():
        parsed = urlparse(str(row['Destination URL'])).query
        parsed = parse_qs(parsed)
        for k, v in parsed.iteritems():
            df.loc[index, k.strip()] = v[0].strip().lower()

    return df

def typo_correct(urlparams, df, dictionary):
    """This function iterates through the DataFrame and checks for any typos/misspellings using the Levenshtein Edit Distance, 
    which then finds the best match from the given dictionary and replaces the incorrect value with the dictionary term with the
    highest probability of being correct. If a change is made an 'X' is put into the 'Fix' column.
    
    :param urlparams: List of headers from URL query parameters.
    :type urlparams: List.
    :param df: Pandas DataFrame.
    :type df: Pandas DataFrame.
    :param dictionary: List of correct words/terms
    :type dictionary: List.
    :returns: Pandas DataFrame 
    """
    for index, row in df.iterrows():
        headers = []
        for w in urlparams:
            fix = False
            if df.loc[index,w] == None or len(df.loc[index,w])<2 or w == 'account':
                pass
            elif str(df.loc[index, w]).lower() in dictionary:
                pass
            else:
                high = 0.0
                word = None
                for item in dictionary:
                    prob = lev.ratio(str(df.loc[index,w]), item)
                    if prob > high:
                        high = prob
                        word = item
                        fix = True
                    else:
                        pass
            if fix:
                headers.append(w)
                df.loc[index, w] = word
        x = " ".join(headers)
        del headers[:]
        df.loc[index, 'Fix'] = x

    return df


